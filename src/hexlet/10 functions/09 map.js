const users = [
  { name: 'Igor', age: 19 },
  { name: 'Danil', age: 1 },
  { name: 'Vovan', age: 4 },
  { name: 'Matvey', age: 16 },
];
const result = [];
for (const { name } of users) {
  result.push(name);
}
console.log(result);

const result2 = [];
for (const { age } of users) {
  result2.push(age);
}
console.log(result2); // => [19, 1, 4, 16]

/* В примерах выше легко увидеть закономерность. Выполняется один и тот же проход по циклу,
и результат собирается в массив result. Единственное, что меняется — значение,
которое мы извлекаем из элементов исходного массива. Именно этот паттерн
называется "отображением". */

/* Теперь посмотрим как выполнить ту же самую операцию, используя встроенный метод map: */
// const names = users.map((user) => user.name);
// const ages = users.map((user) => user.age);
/* С использованием дестракчеринга */
const names = users.map(({name}) => name);
const ages = users.map(({age}) => age);
console.log(names);
console.log(ages);

/* Метод map принимает первым параметром callback-функцию. Дальше внутри себя map перебирает
элементы переданной коллекции и для каждого элемента вызывает callback-функцию.
На вход этой функции передаётся элемент исходного массива, а её результат записывается
в новый массив, который и возвращается наружу. */

/* Некоторые замечания относительно метода map (они относятся в принципе к операции отображения):
Возвращаемый массив всегда такого же размера, как и исходный. map "отображает" каждый элемент исходного массива в элемент возвращаемого.
Внутри анонимной функции можно выполнять любые вычисления, а не только возвращать часть исходного элемента.
map полностью скрывает от нас перебор (обход) исходного массива и процесс сборки нового массива. */

/* Типичный пример, который везде приводят: */
const nums = [1, 2, 4, 5]
console.log(nums.map((num) => num ** 2));

/* Напишем свою собственную функцию, реализующую операцию отображения: */
const myMap = (callback, coll) => {
  const res = [];
  for (const item of coll) {
    res.push(callback(item));
  }
  return res;
};

/* если вызвать метод map на пустом массиве, то он вернет пустой массив */
console.log([].map((e) => e)); // []
