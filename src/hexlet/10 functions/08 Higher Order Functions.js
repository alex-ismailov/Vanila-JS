/* на вход в программу приходит список пользователей,
который нужно отсортировать по возрасту и вывести на экран. */

const users = [
  { name: 'Igor', age: 19 },
  { name: 'Danil', age: 1 },
  { name: 'Vovan', age: 4 },
  { name: 'Matvey', age: 16 },
];

/* Дефолтную сортировку users.sort() отметаем сразу, как непригодную. 
Вместо этого создадим свою callbcak ф-ю, которая определяет порядок сортировки
и передадим ее в метод sort().
Общая идея состоит в том, что нам не нужно реализовывать алгоритм сортировки
каждый раз для каждой ситуации, ведь он не меняется.
Всё, что меняется — элементы, которые сравниваются между собой в процессе сортировки.
И метод sort делегирует взаимодействие с этими элементами вызывающему коду:
*/

const compare = (a, b) => {
  if (a.age === b.age) {
    return 0;
  }
  return a.age > b.age ? 1 : -1;
};

/* testing */
/* console.log(users);
users.sort(compare);
console.log(users); */

/* Метод sort выполняет всю работу по непосредственному перемещению элементов в массиве.
Но то, какой элемент больше или меньше, — зависит от вас. Для этого мы и создали 
ф-ю compare*/

/* В примере выше не обязательно создавать переменную для callback-функции.
Типичное использование выглядит как прямая передача callback функции в функцию sort: */
console.log(users);
users.sort((a, b) => {
  if (a.age === b.age) {
    return 0;
  }
  return a.age > b.age ? 1 : -1;
});
console.log(users);

/* Рассмотреть то, как происходит вызов внутри.
С точки зрения синтаксиса ничего нового не будет. */

// const say = (fn) => {
//   const message = fn();
//   console.log(message);
// };
// или так:
const say = (fn) => console.log(fn());
const callBackFn = () => 'hi!';
say(callBackFn);

/* Функции высшего порядка настолько удобны в большинстве языков,
что практически целиком могут заменить использование тех же циклов.
Например, канонический код на JS выглядит так: */
const getJsFiles = (dir) => fs.readdirSync(dir)
  .filter((filename) => filename.endsWith('js'))
  .map((filename) => path.resolve(dir, filename));

/* В этом коде присутствует 2 функции высшего порядка (filter и map),
2 callback-функции и два прохода (это делают функции высшего порядка)
по содержимому директории dir. Код весьма выразителен и лаконичен. */
