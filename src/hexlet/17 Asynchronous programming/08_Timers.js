const f = () => console.log('hey!');
setTimeout(f, 1000);
console.log('second');

/* !!!!
По историческим причинам у таймеров есть минимальная задержка,
которую они соблюдают всегда, и она равна четырём миллисекундам.
Другими словами, нет разницы между вызовами setTimeout(f, 1), setTimeout(f, 3) и
setTimeout(f, 4) — во всех этих случаях минимальная задержка равна 4. */

/* Таймеры можно не только создавать, но и отменять.
Вызов setTimeout возвращает специальное значение — идентификатор таймера.
Если передать его в функцию clearTimeout, то таймер отменится: */

const f2 = () => console.log('heyheyhey!');
console.log('before timeout');
// В браузере идентификатор таймера это числовое значение
// В node.js это объект
const timerId = setTimeout(f2, 1000);
console.log('after timeout');
clearTimeout(timerId);

/* Дополнительные параметры в setTimeout
Все аргументы, переданные в setTimeout после второго аргумента (времени),
автоматически становятся аргументами функции, которую вызовет таймер. */

const f3 = (a, b) => console.log(a + b);
setTimeout(f3, 1500, 5, 8);
// =>  13

/* Функция-обёртка
Наиболее распространённый способ — создание функции-обёртки.
Такой способ лучше предыдущего из-за его прозрачности:
сразу видно, чтопроисходит. */

const f4 = (a, b) => console.log(a + b);
setTimeout(() => f4(5, 10), 1000);
// =>  13

/* bind
Последний способ — использовать функцию bind.
Основное предназначение этой функции — смена контекста функции.
Но как побочный эффект она может использоваться для частичного применения: */

const f5 = (a, b) => console.log(a + b);
// Первый параметр null потому что контекст не меняется
setTimeout(f5.bind(null, 50, 8), 1000);
// =>  13
// Вызов этой функции возвращает новую функцию с применёнными аргументами.

// const id = setInterval(() => console.log(new Date()), 5000);
// setTimeout(() => clearInterval(id), 16000);

// Таймер можно остановить изнутри, передав в колбек его id.

let counter = 0;
const id = setInterval(() => {
  counter += 1;
  if (counter === 4) {
    clearInterval(id);
    return;
  }
  console.log(new Date());
}, 2000);